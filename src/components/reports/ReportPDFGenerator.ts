
import jsPDF from "jspdf";
import "jspdf/dist/polyfills.es.js";

interface TeacherInfo {
  name: string;
  employeeId: string;
}

interface CourseInfo {
  name: string;
}

interface StudentInfo {
  name: string;
  enrollment: string;
}

interface AttendanceData {
  name: string;
  present: number;
  absent: number;
}

interface AssignmentData {
  name: string;
  average: number;
  highest: number;
  lowest: number;
}

interface StudentPerformance {
  attendance?: {
    total: number;
    present: number;
    percentage: string;
  };
  assignments?: Array<{
    title: string;
    score: number;
    maxScore: number;
    percentage: number;
  }>;
  grades?: Array<{
    name: string;
    value: number;
  }>;
}

export const generateReportPDF = (
  reportType: string,
  teacherInfo: TeacherInfo,
  courseInfo?: CourseInfo | null,
  studentInfo?: StudentInfo | null,
  attendanceData?: AttendanceData[],
  assignmentData?: AssignmentData[],
  studentPerformance?: StudentPerformance,
  financialData?: any
) => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });
  
  // Add title
  doc.setFontSize(18);
  doc.text(`${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report`, 20, 20);
  
  // Add date
  doc.setFontSize(12);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);
  
  // Add teacher info
  doc.text(`Generated by: ${teacherInfo.name || 'N/A'}`, 20, 40);
  doc.text(`Employee ID: ${teacherInfo.employeeId || 'N/A'}`, 20, 50);
  
  // Add course info if selected
  if (courseInfo) {
    doc.text(`Course: ${courseInfo.name || 'N/A'}`, 20, 60);
  }
  
  // Add student info if selected
  if (studentInfo) {
    doc.text(`Student: ${studentInfo.name || 'N/A'}`, 20, 70);
    doc.text(`Enrollment: ${studentInfo.enrollment || 'N/A'}`, 20, 80);
  }
  
  // Add report data based on type
  const yStart = studentInfo ? 90 : 70;
  
  if (reportType === 'attendance') {
    doc.text('Attendance Summary:', 20, yStart);
    
    if (studentInfo && studentPerformance?.attendance) {
      // Student-specific attendance
      doc.text(`Total Classes: ${studentPerformance.attendance.total || 0}`, 20, yStart + 10);
      doc.text(`Present: ${studentPerformance.attendance.present || 0}`, 20, yStart + 20);
      doc.text(`Attendance Rate: ${studentPerformance.attendance.percentage || 0}%`, 20, yStart + 30);
    } else if (attendanceData) {
      // Overall attendance
      attendanceData.forEach((week, index) => {
        doc.text(`${week.name}: Present: ${week.present}, Absent: ${week.absent}`, 20, yStart + (index * 10));
      });
    }
  } else if (reportType === 'performance') {
    doc.text('Performance Summary:', 20, yStart);
    
    if (studentInfo && studentPerformance?.assignments) {
      // Student-specific performance
      doc.text('Assignment Scores:', 20, yStart + 10);
      
      studentPerformance.assignments.forEach((assignment, index) => {
        doc.text(`${assignment.title}: ${assignment.score}/${assignment.maxScore} (${assignment.percentage.toFixed(1)}%)`, 
          20, yStart + 20 + (index * 10));
      });
    } else if (assignmentData) {
      // Overall performance
      assignmentData.forEach((assignment, index) => {
        doc.text(`${assignment.name}: Avg: ${assignment.average}, High: ${assignment.highest}, Low: ${assignment.lowest}`,
          20, yStart + 10 + (index * 10));
      });
    }
  } else if (reportType === 'financial') {
    doc.text('Financial Summary:', 20, yStart);
    
    // Sample financial data for PDF
    const financialSummary = [
      { label: 'Total Revenue', value: '₹354.0K' },
      { label: 'Pending Payments', value: '₹42.5K' },
      { label: 'Revenue Growth', value: '12.5%' }
    ];
    
    financialSummary.forEach((item, index) => {
      doc.text(`${item.label}: ${item.value}`, 20, yStart + 10 + (index * 10));
    });
    
    // Transactions
    doc.text('Recent Transactions:', 20, yStart + 50);
    doc.text('ID          Date             Student           Amount      Status', 20, yStart + 60);
    doc.line(20, yStart + 62, 190, yStart + 62);
    
    const transactions = [
      { id: 'TX001', date: '13 Apr 2025', student: 'Anjali Patel', amount: '₹12.5K', status: 'Completed' },
      { id: 'TX002', date: '12 Apr 2025', student: 'Rahul Shah', amount: '₹18.0K', status: 'Completed' },
      { id: 'TX003', date: '11 Apr 2025', student: 'Priya Kumar', amount: '₹15.0K', status: 'Pending' }
    ];
    
    transactions.forEach((tx, index) => {
      doc.text(`${tx.id}    ${tx.date}    ${tx.student}    ${tx.amount}    ${tx.status}`, 
        20, yStart + 70 + (index * 10));
    });
  }
  
  return doc;
};
